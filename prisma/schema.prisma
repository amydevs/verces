// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OauthApplication {
  id             String @id @default(cuid())
  client_name    String
  client_id      String @unique @default(cuid())
  client_secret  String
  redirect_uris  Json   @default("[]")
  scope          String
  grant_types    Json   @default("[\"authorization_code\"]")
  response_types Json   @default("[\"code\"]")
}

model OidcModel {
  id         String    @id
  type       Int // name of the oidc-provider model
  payload    Json
  grantId    String?
  userCode   String?
  uid        String?   @unique
  expiresAt  DateTime?
  consumedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@unique([id, type])
  @@map("oidc_model")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique // For all intents and purposes at the moment, this IS the username and the userIndex. We'll deal with the problems later :3
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  displayName String? // Display Name

  host String  @default("") // Empty if local instance to allow for unique check.
  uri  String? @unique // Unique on nullable fields don't error when the repetitive value is Null.
  url  String? @unique

  keyPair KeyPair?

  statuses         Status[]
  receivedReplies  Reply[]
  receivedMentions Mention[]
  restatuses       ReStatus[]

  following Follow[] @relation("FollowOrigin")
  followers Follow[] @relation("FollowTarget")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([name, host])
}

model KeyPair {
  userId String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  publicKey  String  @unique
  privateKey String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Status {
  id String @id @default(cuid())

  text String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  mentions   Mention[]
  replies    Reply[]    @relation("StatusReplies")
  replyingTo Reply?
  restatuses ReStatus[]

  visibility Visibility @default(Public)

  uri String? @unique // The URI of a note. it will be empty when the note is local.
  url String? @unique // The human readable url of a note. it will be null when the note is local.

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Reply {
  statusId String @id
  status   Status @relation(fields: [statusId], references: [id], onDelete: Cascade)

  replyingToStatusId String
  replyingToStatus   Status @relation("StatusReplies", fields: [replyingToStatusId], references: [id], onDelete: Cascade)

  replyingToUserId String
  replyingToUser   User   @relation(fields: [replyingToUserId], references: [id], onDelete: Cascade)
}

model Mention {
  statusId String
  status   Status @relation(fields: [statusId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, statusId])
}

model ReStatus {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  statusId String
  status   Status @relation(fields: [statusId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, statusId])
}

enum Visibility {
  Public
  Unlisted
  Private // Followers Only + Mentions
  Direct // Mentions Only
}

model Follow {
  id     String @id @default(uuid())
  userId String
  user   User   @relation("FollowOrigin", fields: [userId], references: [id], onDelete: Cascade)

  targetUserId String
  targetUser   User   @relation("FollowTarget", fields: [targetUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  type FollowType
}

enum FollowType {
  Requested
  Accepted
  Undo
  Rejected
}
